{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","React","memo","monster","console","log","id","className","alt","name","src","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonsters","searchField","setSearchField","useEffect","a","fetch","response","json","data","handleSearchChange","useCallback","e","target","value","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAiBeA,G,YAdFC,IAAMC,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QAEzB,OADAC,QAAQC,IAAR,eAAoBF,EAAQG,GAA5B,cAEE,yBAAKC,UAAU,QACb,yBACEC,IAAKL,EAAQM,KACbC,IAAG,+BAA0BP,EAAQG,GAAlC,4BAEL,4BAAKH,EAAQM,MACb,2BAAIN,EAAQQ,YCGHC,G,MAXE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAElB,OADAT,QAAQC,IAAI,uBAEV,yBAAKE,UAAU,YACZM,EAASC,KAAI,SAAAX,GAAO,OACnB,kBAAC,EAAD,CAAMY,IAAKZ,EAAQG,GAAIH,QAASA,UCMzBa,G,MAZGf,IAAMC,MAAK,YAAoC,IAAjCe,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAE3C,OADAd,QAAQC,IAAI,wBAEV,2BACEE,UAAU,YACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,QC+BDG,MAnCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNT,EADM,KACIU,EADJ,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAIbC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,sEACwBC,MACrB,8CAFH,cACOC,EADP,gBAIoBA,EAASC,OAJ7B,OAIOC,EAJP,OAKCR,EAAYQ,GALb,0CAAD,KAOC,IAEH,IAAMC,EAAqBC,uBAAY,SAAAC,GACrC9B,QAAQC,IAAI,oBACZoB,EAAeS,EAAEC,OAAOC,SACvB,IAEGC,EAAmBxB,EAASyB,QAAO,SAAAnC,GAAO,OAC9CA,EAAQM,KAAK8B,cAAcC,SAAShB,EAAYe,kBAGlD,OACE,yBAAKhC,UAAU,OACb,wBAAIA,UAAU,cAAd,oBACA,kBAAC,EAAD,CACEU,YAAY,kBACZC,aAAcc,IAEhB,kBAAC,EAAD,CAAUnB,SAAUwB,MCxBNI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.abcd9b86.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = React.memo(({ monster }) => {\n  console.log(`Card ${monster.id} rendered`);\n  return (\n    <div className=\"Card\">\n      <img\n        alt={monster.name}\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from 'react';\nimport Card from '../Card/Card';\nimport './CardList.css';\n\nconst CardList = ({ monsters }) => {\n  console.log('card list rendering');\n  return (\n    <div className=\"CardList\">\n      {monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = React.memo(({ placeholder, handleChange }) => {\n  console.log('search box rendering');\n  return (\n    <input\n      className=\"SearchBox\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n});\n\nexport default SearchBox;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\n\nimport CardList from './components/CardList/CardList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      const data = await response.json();\n      setMonsters(data);\n    })();\n  }, []);\n\n  const handleSearchChange = useCallback(e => {\n    console.log('handeling change');\n    setSearchField(e.target.value);\n  }, []);\n\n  const filteredMonsters = monsters.filter(monster =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\">Monsters Rolodex</h1>\n      <SearchBox\n        placeholder=\"Search Monsters\"\n        handleChange={handleSearchChange}\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}